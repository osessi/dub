// --- Imports de tous les sous-sch√©mas Prisma ---
import "./bounty.prisma"
import "./campaign.prisma"
import "./comment.prisma"
import "./commission.prisma"
import "./customer.prisma"
import "./dashboard.prisma"
import "./discount.prisma"
import "./domain.prisma"
import "./folder.prisma"
import "./group.prisma"
import "./integration.prisma"
import "./invoice.prisma"
import "./jackson.prisma"
import "./link.prisma"
import "./message.prisma"
import "./misc.prisma"
import "./network.prisma"
import "./notification.prisma"
import "./oauth.prisma"
import "./partner.prisma"
import "./payout.prisma"
import "./program.prisma"
import "./reward.prisma"
import "./tag.prisma"
import "./token.prisma"
import "./utm.prisma"
import "./webhook.prisma"
import "./workflow.prisma"
import "./workspace.prisma"
// --- Fin des imports ---
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "driverAdapters", "prismaSchemaFolder", "omitApi"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isMachine     Boolean   @default(false)

  // password data
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  lockedAt             DateTime?

  createdAt             DateTime               @default(now())
  subscribed            Boolean                @default(true) // email subscription
  source                String? // where the user came from
  defaultWorkspace      String? // slug of the user's default workspace
  defaultPartnerId      String? // the user's default partner ID
  // relational data
  accounts              Account[]
  sessions              Session[]
  projects              ProjectUsers[]
  partners              PartnerUser[]
  links                 Link[]
  dashboards            Dashboard[]
  tokens                Token[]
  restrictedTokens      RestrictedToken[]
  oAuthCodes            OAuthCode[]
  integrations          Integration[] // Integrations user created in their workspace
  installedIntegrations InstalledIntegration[] // Integrations user installed in their workspace
  folders               FolderUser[]
  folderAccessRequests  FolderAccessRequest[]
  utmTemplates          UtmTemplate[]
  payouts               Payout[]
  bountySubmissions     BountySubmission[]
  sentMessages          Message[]
  partnerComments       PartnerComment[]

  @@index(source)
  @@index(defaultWorkspace)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
